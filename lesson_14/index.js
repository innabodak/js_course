// –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é add, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ —ç–º–æ–¥–∑–∏, 
// –∏ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å—É–º–º—ã –¥–≤—É—Ö –∫–æ–¥–æ–≤ —ç–º–æ–¥–∑–∏ 
// (—ç–º–æ–¥–∑–∏-—Å–∏–º–≤–æ–ª—ã —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –¥–≤—É—Ö unicode –∫–æ–¥–æ–≤). 
// –ù–∞–ø—Ä–∏–º–µ—Ä add('üçîüòÅ') –≤–µ—Ä–Ω—ë—Ç 112359 –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π, 
// —Ç–æ –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ —ç–º–æ–¥–∑–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ —Å–µ—Ä–¥—Ü–∞ –∏ —Ñ–ª–∞–≥–∞ —É–∫—Ä–∞–∏–Ω—ã.



// task #2
// –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é clearNumbers, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤.
// –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —ç—Ç–æ—Ç –∂–µ –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤, –Ω–æ –æ—á–∏—Å—Ç–∏–≤ –∏—Ö –æ—Ç –Ω–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

let arr1 = [[1, "fgg"], [2, {}], [3, [], 5]];

function clearNumbers (arr) {
	for (let i = 0; i < arr.length; i++) {
		arr[i] = arr[i].filter((el) => typeof el === "number");
	}
	
	return arr;
}


// task #3
// –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é revers, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥–º–µ–Ω—Ç–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π –∏ –Ω–∏—Ö - —Å—Ç—Ä–æ–∫–∞.
// –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - –±—É–¥–µ—Ç –∑–∞–¥–æ–º-–Ω–∞–ø–µ—Ä–µ–¥.
// –ù–∞–ø—Ä–∏–º–µ—Ä: revers('123', '456')–≤–µ—Ä–Ω–µ—Ç ['654', '321']


function revers(){
	let stringArr = [];
	for (var i = 0; i < arguments.length; i++){
		if (typeof arguments[i] === "string") {
			stringArr[i] = arguments[i].split("").reverse().join("");
		}
		else {
			console.log("–≤–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞");
		}
	}	

	return stringArr.reverse();
}


// –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é splitArray –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª,
// –∞ –≤—Ç–æ—Ä—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞—Ö. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤.
// –ù–∞–ø—Ä–∏–º–µ—Ä:  splitArray([1, 4, 5, 6, 2], 2) –≤–µ—Ä–Ω–µ—Ç [[1, 4], [5, 6], [2]].
// –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–º–∞—Å—Å–∏–≤ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.


let arr = [1, 4, 5, 6, 2];
let count = 2;

function splitArray(arr, count) {
	let result = [];
	for (let i = 0; arr.length > 0; i++){
		result[i] = arr.splice(0, count);
	}

	return result;
}

